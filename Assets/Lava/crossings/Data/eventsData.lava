{
  "Audiences": [
    {% assign existing = "" %}
    {% eventcalendaritem where:'EventCalendarId != 0' %}
      {% for item in eventcalendaritemItems %}
        {% assign eventid = item.EventItem.Id%}
        {% eventitem id:'{{ eventid }}' %}
          {% if eventitem.IsActive and eventitem.IsApproved %}
            {% assign audiences = eventitem.EventItemAudiences %}
            {% for audience in audiences %}
              {% assign curAudience = audience.DefinedValue.Value | StripNewlines | ToJSON %}
              {% assign match = existing | RegExMatch:curAudience %}
              {% if match == false %}
                  {{ curAudience }},
                  {% assign existing = existing | Append:curAudience %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endeventitem %}
      {% endfor %}
    {% endeventcalendaritem %}
  ],
 "Events":
    {% comment %}

      We want to sort on 'item.EventItem.EventItemOccurrences[0].occurance.NextStartDateTime' here,
      which isn't possible with event commands, so we do some crazy stuff here...

      1. Capture JSON for events array to 'eventsJson' variable
      2. Deserialize JSON into an array of objects
      3. Sort that array
      4. Capture a new array to JSON, limiting to the first N results to try and prevent slow page loads
      5. Output the sorted, limited JSON array to be captured into the persisted dataset

      SQL would be an alternative here, but would maybe have compatibility issues in future versions of Rock.

    {% endcomment %}
    {% assign imageStorageUrl = 'Global' | Attribute:'ImageURL' | Prepend:'https://' %}
    {% assign imageSize = '/fit-in/600x600' %}
    {% assign limit = 48 %}
    {% assign eventsJson = "[" %}
    {% eventcalendaritem where:'EventCalendarId != 0' %}
      {% for item in eventcalendaritemItems %}
        {% assign eventid = item.EventItem.Id%}
        {% eventitem id:'{{ eventid }}' %}
          {% if eventitem.IsActive and eventitem.IsApproved %}

            {% comment %} Dataset is only for upcoming events {% endcomment %}
            {% assign occurrence = eventitem.EventItemOccurrences | First %}
            {% assign schedule = occurrence.Schedule%}
            {% if schedule.NextStartDateTime == null  %}
              {% continue %}
            {% endif %}

            {% assign name = eventitem.Name %}
            {% assign summary = eventitem.Summary %}
            {% assign audiences = eventitem.EventItemAudiences %}
            {% assign occurrenceCount = eventitem.EventItemOccurrences | Size %}

            {% assign imageUrlPath = eventitem | Attribute:'Imageasset' | Url:'localpath' %}
            {% assign imageAsset = imageStorageUrl | Append: imageSize | Append:imageUrlPath %}

            {% assign photoId = eventitem.PhotoId %}
            {% if photoId != null %}
              {% binaryfile id:'{{photoId}}' %}
                {% assign url = binaryfile.Url %}
              {% endbinaryfile %}
            {% else %}
              {% assign url = ""%}
            {% endif %}

            {% assign date = schedule.NextStartDateTime | Date: 'MMM d, h:mm tt'%}
            {% assign sortableDate = schedule.NextStartDateTime | Date: 'yyyy-MM-dd HH:mm'%}
            {% assign schedule = occurrence.Schedule.FriendlyScheduleText %}
            {% assign occurrenceId = occurrence.Id%}
            {% assign link = occurrenceId | Prepend:'/events/'%}
            {% capture eventsJson %}{{eventsJson}} { {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"AssetImage": {{imageAsset | ToJSON}} , {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"PhotoId": {{photoId | ToJSON}} , {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"PhotoUrl": {{url | ToJSON}} , {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"EventId": {{eventid | ToJSON}} , {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"Name": {{name | ToJSON}} , {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"Summary": {{summary | ToJSON}} , {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"audiences": [ {%endcapture%}
                {% for audience in audiences%}
                  {% capture eventsJson %}{{eventsJson}}{{ audience.DefinedValue.Value | StripNewlines | ToJSON }}{%endcapture%}
                  {% unless forloop.last %}{% capture eventsJson %}{{eventsJson}} , {%endcapture%}{% endunless %}
                {% endfor %}
              {% capture eventsJson %}{{eventsJson}} ], {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"occurrence": { {%endcapture%}
                {% capture eventsJson %}{{eventsJson}}"ContactPersonAliasId": {{occurrence.ContactPersonAliasId | ToJSON}},{%endcapture%}
                {% capture eventsJson %}{{eventsJson}}"ContactEmail": {{occurrence.ContactEmail | ToJSON}} , {%endcapture%}
                {% capture eventsJson %}{{eventsJson}}"Linkages": [ {%endcapture%}
                  {% for linkage in occurrence.Linkages %}
                    {% capture eventsJson %}{{eventsJson}} { {%endcapture%}
                      {% capture eventsJson %}{{eventsJson}}"startDateTime": {{linkage.RegistrationInstance.StartDateTime | ToJSON}} , {%endcapture%}
                      {% capture eventsJson %}{{eventsJson}}"endDateTime": {{linkage.RegistrationInstance.EndDateTime | ToJSON}} , {%endcapture%}
                      {% capture eventsJson %}{{eventsJson}}"PublicName": {{linkage.PublicName | ToJSON}} , {%endcapture%}
                      {% capture eventsJson %}{{eventsJson}}"RegistrationInstanceId": {{linkage.RegistrationInstanceId | ToJSON}}{%endcapture%}
                    {% capture eventsJson %}{{eventsJson}} } {%endcapture%}
                    {% unless forloop.last %}{% capture eventsJson %}{{eventsJson}}, {%endcapture%}{% endunless %}
                  {% endfor %}
                {% capture eventsJson %}{{eventsJson}} ], {%endcapture%}
                {% capture eventsJson %}{{eventsJson}}"Note": {{occurrence.Note | StripNewlines | StripHtml | ToJSON}} , {%endcapture%}
                {% capture eventsJson %}{{eventsJson}}"Schedule": {{occurrence.Schedule.FriendlyScheduleText | ToJSON}}{%endcapture%}
              {% capture eventsJson %}{{eventsJson}} }, {% endcapture %}
              {% capture eventsJson %}{{eventsJson}}"date": {{date | ToJSON}} , {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"sortableDate": {{sortableDate | ToJSON}} , {%endcapture%}
              {% capture eventsJson %}{{eventsJson}}"link": {{link | ToJSON}}{%endcapture%}
            {% capture eventsJson %}{{eventsJson}} } {%endcapture%}
            {% unless forloop.last %}{% capture eventsJson %}{{eventsJson}}, {%endcapture%}{% endunless %}

          {% endif %}
        {% endeventitem %}
      {% endfor %}
    {% endeventcalendaritem %}
    {% capture eventsJson %}{{eventsJson}} ] {%endcapture%}
    {% assign events = eventsJson | FromJSON %}
    {% assign sortedEvents = events | Sort:'sortableDate' %}

    {% assign limitedEvents = "[" %}
    {% for event in sortedEvents limit:limit %}
      {% capture limitedEvents %}{{limitedEvents}}{{event | ToJSON}}{%endcapture%}
      {% unless forloop.last %}{% capture limitedEvents %}{{limitedEvents}}, {%endcapture%}{% endunless %}
    {% endfor %}
    {% capture limitedEvents %}{{limitedEvents}}]{%endcapture%}
    {{ limitedEvents }}

}
