{%- comment -%}
  Used as a shortcode - primarymedialist
  Lists a mix of sermon and teaching series channel items. Data is fed from the Combinedmedia persisted dataset
{%- endcomment -%}

{% assign imageStorageUrl = 'Global' | Attribute:'ImageURL' | Prepend:'https://' %}
{% assign mediaItemsPerPage = 'Global' | Attribute:'MediaItemsPerPage' %}
{% assign mediaItemImageResize = 'Global' | Attribute:'MediaItemImageResize' %}

{% javascript id:'vue' url:'https://cdn.jsdelivr.net/combine/npm/vue@2.6.11/dist/vue.js,npm/axios@0.19.2/dist/axios.js,npm/vue-autosuggest@2.2.0' %}
{% endjavascript %}
<link rel="stylesheet" type="text/css" href="~~/Styles/vue-autosuggest.css">

<div id="vapp" class="media-list">
  <div class="media-search">

    <vue-rock-filterable-list
      :items="messages"
      :label="'Find a Message or Series'"
      :place-holder="'Title or speaker name'"
      :items-per-page="'{{mediaItemsPerPage}}'"
      :search-options="searchOptions"
      :initial-input="tagInput"
      @filter="filterHandler"
      v-slot="{ item: message }"
      >
      <a :href="mediaUrl(message)" class="card cardShadow">
        <div class="thumb" :style="{ backgroundImage: 'url(\'' + mediaImg(message) + '\')' }">
        </div>
        <div class="row card-content-row">
          <div class="card-content">
            <div class="btn icon-button shadowDepth2">
              <i class="fas fa-play"></i>
              <span>Watch</span>
            </div>
            <div class="col">
              <div>
                <h3>{% raw %}{{ message.Title }}{% endraw %}</h3>
                <h5 v-if="message.Series" class="series">{% raw %}{{ message.Series.Title }}{% endraw %}</h5>
                <h5>{% raw %}{{ message.Speaker }}{% endraw %}</h5>
                <p class="date">{% raw %}{{ message.StartDate }}{% endraw %}</p>
              </div>
            </div>
          </div>
        </div>
      </a>
    </vue-rock-filterable-list>

  </div>
</div>

<script src="/Themes/RockTheme/Scripts/vue-rock-filterable-list.js"></script>

<script>

const imageStorageUrl = '{{ imageStorageUrl }}';

const vueApp = new Vue({
  el: '#vapp',
  data () {
    return {
      messages : [''],
      searchOptions: [''],
      tagInput: ''
    }
  },
  methods:{
    filterHandler(messages, filterText, cb) {
      let filteredEvents = messages.filter(message => {
        if (!filterText) return true;
        let shouldInclude = false;
        shouldInclude |= (!!message.Speaker && message.Speaker.toLowerCase().includes(filterText.toLowerCase().trim()));
        shouldInclude |= (filterText.toLowerCase().trim().length >= 2 && !!message.Topics && message.Topics.map(t => t.toLowerCase().trim()).filter(t => t.indexOf(filterText.toLowerCase().trim()) === 0).length > 0);
        shouldInclude |= (!!message.Title && message.Title.toLowerCase().trim().includes(filterText.toLowerCase().trim()));
        shouldInclude |= (!!message.Series && !!message.Series.Title && message.Series.Title.toLowerCase().trim().includes(filterText.toLowerCase().trim()));
        return !!shouldInclude;
      });
      cb(filteredEvents);
    },
    mediaUrl(item) {
      if (item.Series) {
        return `/media/${item.ChannelPath}${item.Series.Slug}/${item.PrimarySlug}`;
      }
      else {
        return `/media/${item.PrimarySlug}`;
      }
    },
    mediaImg(item) {
      let imageStorageUrl = '{{imageStorageUrl}}';
      let imageUrl = `${imageStorageUrl}{{mediaItemImageResize}}${item.Image}`;
      if (item.useVimeoImage) {
        imageUrl = item.Image;
      }
      return imageUrl;
    },
    getMedia () {
      let data = [];
      axios
        .get('/Webhooks/Lava.ashx/crossings/api/combined-media')
        .then(response => {
          this.messages = response.data.Messages;
          const topics = response.data.FilterLists.Topics.map(t => t.Name);
          const speakers = response.data.FilterLists.Speakers.map(s => s.Name);
          const combined = topics.concat(speakers);
          this.searchOptions = [
            { data: combined }
          ];

        });
    },
    applySearchTags() {
      const params = new URLSearchParams(window.location.search);
      if (params.has('tag')) {
        var tag = params.get('tag');
        this.tagInput = tag;
      }
    }
  },
  created(){
    this.getMedia();
    this.applySearchTags();
  }
});

</script>
