{% assign imageStorageUrl = 'Global' | Attribute:'ImageURL' | Prepend:'https://' %}
{% assign mediaItemsPerPage = 'Global' | Attribute:'MediaItemsPerPage' %}
{% assign mediaItemImageResize = 'Global' | Attribute:'MediaItemImageResize' %}
{% assign mediaItemTopicMinCharsToMatch = 'Global' | Attribute:'MediaItemTopicMinCharsToMatch' %}
{% assign mediaData = 'Combinedmedia' | PersistedDataset %}
{%- assign channelAnchor =  ContentChannel | Attribute:'SectionAnchor' -%}
{% if channelAnchor != '' %} <div id="{{channelAnchor}}"></div> {% endif %}

{% javascript id:'vue' url:'https://cdn.jsdelivr.net/combine/npm/vue@2.6.11/dist/vue.js,npm/axios@0.19.2/dist/axios.js,npm/vue-autosuggest@2.2.0' %}
{% endjavascript %}
<link rel="stylesheet" type="text/css" href="~~/Styles/vue-autosuggest.css">

<div id="vue-template-dropdown" style="display:none;">
  <div class="form-group">
    <label>{%raw%}{{headingLabel}}{%endraw%}</label>
    <div class="dropdown" :class="{'open': isOpen}">
      <button @click="isOpen = !isOpen" type="button" aria-haspopup="true" aria-expanded="true" class="btn btn-default btn-dropdown dropdown-toggle">{%raw%}{{selectedValue}}{%endraw%}<i class="fas fa-angle-down pull-right"></i></button>
      <ul class="dropdown-menu">
        <li><a @click="handleClick(-1)">Any</a></li>
        <li role="separator" class="divider"></li>
        <li v-for="(option,i) in options"><a @click="handleClick(i)">{%raw%}{{option.Name}}{%endraw%}</a></li>
      </ul>
    </div>
  </div>
</div>

<div id="vapp" class="media-list">
  <div class="media-search">

    <vue-rock-filterable-list
      :items="messages" :label="'Find a Message or Series'"
      :items-per-page="'{{mediaItemsPerPage}}'" :search-options="searchOptions"
      :initial-input="filterInput"
      v-slot="{ item: message }"
      >
      <a :href="mediaUrl(message)" class="card cardShadow">
        <div class="thumb" :style="{ backgroundImage: 'url(\'' + mediaImg(message) + '\')' }">
        </div>
        <div class="row card-content-row">
          <div class="card-content">
            <div class="btn icon-button shadowDepth2">
              <i class="fas fa-play"></i>
              <span>Watch</span>
            </div>
            <div class="col">
              <div>
                <h3>{% raw %}{{ message.Title }}{% endraw %}</h3>
                <h5 v-if="message.Series" class="series">{% raw %}{{ message.Series.Title }}{% endraw %}</h5>
                <h5>{% raw %}{{ message.Speaker }}{% endraw %}</h5>
                <p class="date">{% raw %}{{ message.StartDate }}{% endraw %}</p>
              </div>
            </div>
          </div>
        </div>
      </a>
    </vue-rock-filterable-list>

  </div>
</div>
<div class="hidden">
    <p>Sermon Series</p>
    <a href="/media/sermons">Sermons</a>
    <p>Teaching Series</p>
    <a href="/media/teachings">Teachings</a>
</div>

<script src="/Themes/RockTheme/Scripts/vue-rock-filterable-list.js"></script>

<script>

const imageStorageUrl = '{{ imageStorageUrl }}';

Vue.component('vue-autosuggest', VueAutosuggest.VueAutosuggest);

const vueApp = new Vue({
  el: '#vapp',
  data () {
    return {
      messages : [''],
      searchOptions: [''],
      filterInput: ''
    }
  },
  methods:{
    mediaUrl(item) {
      if (item.Series) {
        return `/media/${item.ChannelPath}${item.Series.Slug}/${item.PrimarySlug}`;
      }
      else {
        return `/media/${item.PrimarySlug}`;
      }
    },
    mediaImg(item) {
      let imageStorageUrl = '{{imageStorageUrl}}';
      let imageUrl = `${imageStorageUrl}{{mediaItemImageResize}}${item.Image}`;
      if (item.useVimeoImage) {
        imageUrl = item.Image;
      }
      return imageUrl;
    },
    getMedia () {
      let data = [];
      axios
        .get('/Webhooks/Lava.ashx/crossings/api/combined-media')
        .then(response => {
          this.messages = response.data.Messages;
          const topics = response.data.FilterLists.Topics.map(t => t.Name);
          const speakers = response.data.FilterLists.Speakers.map(s => s.Name);
          const combined = topics.concat(speakers);
          this.searchOptions = [
            { data: combined }
          ];

        });
    },
    applySearchTags() {
      const params = new URLSearchParams(window.location.search);
      if (params.has('tag')) {
        var tag = params.get('tag');
        this.filterInput = tag;
      }
    }
  },
  created(){
    this.getMedia();
    this.applySearchTags();
  }
});

</script>
