{% assign imageStorageUrl = 'Global' | Attribute:'ImageURL' | Prepend:'https://' %}
{% assign mediaData = 'Combinedmedia' | PersistedDataset %}

{% javascript id:'vue' url:'https://cdn.jsdelivr.net/combine/npm/vue@2.6.11/dist/vue.js,npm/axios@0.19.2/dist/axios.js' %}
{% endjavascript %}

<div id="vapp" class="media-list">
  <div class="media-search">
    <div class="container">
      {% comment %} {% assign filterLists = mediaData.FilterLists %}
      {[ mediaFilters lists:filterLists ]} {% endcomment %}
      <div class="media-list-items" data-aos="fade-up">
        <div class="row flex-row flex-wrap">

          <div v-for="item in mediaItems" class="col-sm-6 col-md-4">
            <a :href="mediaUrl(item)" class="card cardShadow">
              <div class="thumb">
                <img :src="mediaImg(item)" class="object-fit">
              </div>
              <div class="row card-content-row">
                <div class="card-content">
                  <div class="btn icon-button shadowDepth2">
                    <i class="fas fa-play"></i>
                    <span>Watch</span>
                  </div>
                  <div class="col">
                    <div>
                      <h3>{% raw %}{{ item.Title }}{% endraw %}</h3>
                      <h5 v-if="item.Series" class="series">{% raw %}{{ item.Series.Title }}{% endraw %}</h5>
                      <h5>{% raw %}{{ item.Speaker }}{% endraw %}</h5>
                      <p class="date">{% raw %}{{ item.StartDate }}{% endraw %}</p>
                    </div>
                  </div>
                </div>
              </div>
            </a>
          </div>
        </div>
        <nav>
          <ul class="pagination">
            <li class="page-item">
              <button type="button" class="page-link" v-if="page != 1" @click="page--"> Back </button>
            </li>
            <li class="page-item">
              <button type="button" class="page-link" v-for="pageNumber in pages.slice(page-1, page+5)" @click="page = pageNumber"> {{pageNumber}} </button>
            </li>
            <li class="page-item">
              <button type="button" @click="page++" v-if="page < pages.length" class="page-link"> Next </button>
            </li>
          </ul>
        </nav>
      </div>
    </div>
  </div>
</div>

<script>

const imageStorageUrl = '{{ imageStorageUrl }}';
const vueApp = new Vue({
  el: '#vapp',
  data () {
		return {
			posts : [''],
			page: 1,
			perPage: 9,
			pages: [],
		}
	},
	methods:{
    mediaUrl(item) {
      if (item.Series) {
        return `/media/${item.ChannelPath}${item.Series.Slug}/${item.PrimarySlug}`;
      }
      else {
        return `/media/${item.PrimarySlug}`;
      }
    },
    mediaImg(item) {
      let imageStorageUrl = '{{imageStorageUrl}}';
      let imageUrl = `${imageStorageUrl}/fit-in/450x325${item.Image}`;
      if (item.useVimeoImage) {
        imageUrl = item.Image;
      }
      return imageUrl;
    },
		getPosts () {
      let data = [];
      console.log('I am getting posts...')
      axios
        .get('http://localhost:50886/Webhooks/Lava.ashx/crossings/api/combined-media')
        .then(response => {
          console.log('I got the posts', response.data.Messages);
          this.posts = response.data.Messages;
          console.log('posts.length', this.posts.length);
        });
		},
		setPages () {
			let numberOfPages = Math.ceil(this.posts.length / this.perPage);
			for (let index = 1; index <= numberOfPages; index++) {
				this.pages.push(index);
			}
		},
		paginate (posts) {
			let page = this.page;
			let perPage = this.perPage;
			let from = (page * perPage) - perPage;
			let to = (page * perPage);
			return  posts.slice(from, to);
		}
	},
	computed: {
		mediaItems () {
			return this.paginate(this.posts);
		}
	},
	watch: {
		posts () {
			this.setPages();
		}
	},
	created(){
		this.getPosts();
	},
	filters: {
		trimWords(value){
			return value.split(" ").splice(0,20).join(" ") + '...';
		}
	}
});

</script>
