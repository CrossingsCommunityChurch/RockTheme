{%- comment -%}
  Used as a shortcode - primarymedialist
  Lists a mix of sermon and teaching series channel items. Data is fed from the Combinedmedia persisted dataset
{%- endcomment -%}

{%- assign imageStorageUrl = 'Global' | Attribute:'ImageURL' | Prepend:'https://' -%}
{%- assign imageSize = ',c_scale,h_450' -%}
{%- assign mediaItemsPerPage = 'Global' | Attribute:'MediaItemsPerPage' -%}
{%- assign mediaItemImageResize = 'Global' | Attribute:'MediaItemImageResize' -%}
{%- assign mediaItemTopicMinCharsToMatch = 'Global' | Attribute:'MediaItemTopicMinCharsToMatch' -%}

{%- assign channelAnchor =  ContentChannel | Attribute:'SectionAnchor' -%}
{%- if channelAnchor != '' -%} <div id="{{channelAnchor}}"></div> {%- endif -%}

{%- javascript id:'vue' url:'https://cdn.jsdelivr.net/combine/npm/vue@2.6.11/dist/vue.js,npm/axios@0.19.2/dist/axios.js,npm/vue-autosuggest@2.2.0' -%}
{%- endjavascript -%}
<link rel="stylesheet" type="text/css" href="~~/Styles/vue-autosuggest.css">

<div id="vue-template-dropdown" style="display:none;">
  <div class="form-group">
    <label>{%raw%}{{headingLabel}}{%endraw%}</label>
    <div class="dropdown" :class="{'open': isOpen}">
      <button @click="isOpen = !isOpen" type="button" aria-haspopup="true" aria-expanded="true" class="btn btn-default btn-dropdown dropdown-toggle">{%raw%}{{selectedValue}}{%endraw%}<i class="fas fa-angle-down pull-right"></i></button>
      <ul class="dropdown-menu">
        <li><a @click="handleClick(-1)">Any</a></li>
        <li role="separator" class="divider"></li>
        <li v-for="(option,i) in options"><a @click="handleClick(i)">{%raw%}{{option.Name}}{%endraw%}</a></li>
      </ul>
    </div>
  </div>
</div>

<div id="vapp" class="media-list">
  <div class="media-search">
    <div class="container">
      <div class="media-filter row">
        <div class="col-md-12">
          <h2>Find a Message or Series</h2>
        </div>
        <div class="col-md-6 col-lg-8">
          <div class="form form-inline">
            <div class="v-dropdown-input input-group media-filter-input">
              <span class="input-group-addon"><i class="fa fa-search"></i></span>
              <vue-autosuggest
                  :suggestions="filteredSearchOptions"
                  :input-props="{id:'autosuggest__input', placeholder:'Search by Speaker, Topic, Series or Message'}"
                  :should-render-suggestions="shouldRenderSuggestions"
                  v-model="filterInput"
                  @input="onInputChange"
                  @selected="onSelected"
                >
                <template slot-scope="{suggestion}">
                  <span class="my-suggestion-item">{%- raw -%}{{ suggestion.item }}{%- endraw -%}</span>
                </template>
              </vue-autosuggest>
            </div>
          </div>
        </div>
        <div v-if="showResults" class="col-md-6 col-lg-4">
          <div role="group" aria-label="..." class="btn-group pull-right card-list-filter">
            <button type="button" class="btn btn-primary" style="outline: none;"><i class="fas fa-bars"></i></button>
            <button type="button" class="btn btn-primary active" style="outline: none;"><i class="fas fa-th"></i></button>
          </div>
        </div>
      </div>
      <div v-if="showResults">
        <div class="media-list-items">
          <div class="row flex-row flex-wrap">
          <div v-for="item in mediaItems" class="col-sm-6 col-md-4">
            <a :href="mediaUrl(item)" class="card cardShadow">
              <div class="thumb" :style="{ backgroundImage: 'url(\'' + mediaImg(item) + '\')' }">
              </div>
              <div class="row card-content-row">
                <div class="card-content">
                  <div class="btn icon-button shadowDepth2">
                    <i class="fas fa-play"></i>
                    <span>Watch</span>
                  </div>
                  <div class="col">
                    <div>
                      <h3>{%- raw -%}{{ item.Title }}{%- endraw -%}</h3>
                      <h5 v-if="item.Series" class="series">{%- raw -%}{{ item.Series.Title }}{%- endraw -%}</h5>
                      <h5>{%- raw -%}{{ item.Speaker }}{%- endraw -%}</h5>
                      <p class="date">{%- raw -%}{{ item.StartDate }}{%- endraw -%}</p>
                    </div>
                  </div>
                </div>
              </div>
            </a>
          </div>
          </div>
        <div class="paginate-buttons text-center">
          <a class="btn btn-default" id="more" role="button" v-if="page < pages.length" @click="page++">More</a>
        </div>
        </div>
      </div>
      <div v-if="!showResults">
        <div class="media-list-items">
          <div class="row">
            <div class="col-sm-6">
              <h3>Sunday Messages</h3>
            </div>
            <div class="col-sm-6" style="text-align: right; margin-top: 1em;">
              <a href="/media/sermons">
                View More
              </a>
            </div>
          </div>
          <div class="row flex-row flex-wrap">
            <div v-for="item in sermonSeries" class="col-sm-6 card-series col-md-4">
              <a :href="seriesMediaUrl(item)" class="card  cardShadow">
                <div class="thumb" >
                   <img src="" class="event-img cld-hidpi" :data-src="mediaImg(item)">
                </div>
              </a>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-6">
              <h3>Teaching Series</h3>
            </div>
            <div class="col-sm-6" style="text-align: right; margin-top: 1em;">
              <a href="/media/teachings">
                View More
              </a>
            </div>
          </div>
          <div class="row flex-row flex-wrap">
            <div v-for="item in teachingSeries" class="col-sm-6 card-series col-md-4">
              <a :href="seriesMediaUrl(item)" class="card  cardShadow">
                <div class="thumb" >
                   <img src="" class="event-img cld-hidpi" :data-src="mediaImg(item)">
                </div>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="hidden">
    <p>Sermon Series</p>
    <a href="/media/sermons">Sermons</a>
    <p>Teaching Series</p>
    <a href="/media/teachings">Teachings</a>
</div>

<script>

const imageStorageUrl = '{{ imageStorageUrl }}';
var cl = cloudinary.Cloudinary.new({ cloud_name: 'crossings-community-church'});

Vue.component('vue-autosuggest', VueAutosuggest.VueAutosuggest);

const vueApp = new Vue({
  el: '#vapp',
  data () {
    return {
      messages : [''],
      sermonSeries: [''],
      teachingSeries: [''],
      vueCl: cl,
      topics: [''],
      speakers: [''],
      searchOptions: [''],
      filteredSearchOptions: [''],
      topicFilter: '',
      speakerFilter: '',
      bookFilter: '',
      filterInput: '',
      page: 1,
      showResults: false,
      perPage: {{mediaItemsPerPage}},
      pages: []
    }
  },
  methods:{
    shouldRenderSuggestions (size, loading) {
      return size >= 1 && !loading
    },
    onSelected(option) {
        if (option != '') {
          this.filterInput = option.item;
        }
    },
    onInputChange(text) {
      this.showResults = true;
      var filteredData = this.searchOptions[0].data.filter(item => {
        return item.toLowerCase().indexOf(text.toLowerCase()) > -1;
      });;

      this.filteredSearchOptions = [{
        data: filteredData
      }];

      this.filterInput = text;

      if (text === '') {
        this.showResults = false;
        this.filteredSearchOptions = [];
      }

    },
    mediaUrl(item) {
      if (item.Series) {
        return `/media/${item.ChannelPath}${item.Series.Slug}/${item.PrimarySlug}`;
      }
      else {
        return `/media/${item.PrimarySlug}`;
      }
    },
     seriesMediaUrl(item) {
        return item.Slug;
    },
    mediaImg(item) {
      if(item.Image.startsWith("https://")){
        return item.Image;
      }
      else {
      let imageStorageUrl = '{{imageStorageUrl}}';
      let imageUrl = `${imageStorageUrl}{{mediaItemImageResize}}${item.Image}`;
      if (item.useVimeoImage) {
        imageUrl = item.Image;
      }
      return imageUrl;
      }
    },
    getMedia () {
      let data = [];
      axios
        .get('/Webhooks/Lava.ashx/crossings/api/combined-media')
        .then(response => {
          this.messages = response.data.Messages;
          const topics = response.data.FilterLists.Topics.map(t => t.Name);
          const speakers = response.data.FilterLists.Speakers.map(s => s.Name);
          const combined = topics.concat(speakers);
          this.searchOptions = [
            { data: combined }
          ];

        });
    },
    getSermonSeries () {
      let data = [];
      axios
        .get('/Webhooks/Lava.ashx/crossings/api/sermon-series')
        .then(response => {
          data = response.data;
         this.sermonSeries =  data.filter(e => (new Date(e.PublishDateTime) < new Date() && !e.Title.includes('Stand Alone Messages') ))
          .sort((a,b) => new Date(b.PublishDateTime) - new Date(a.PublishDateTime))
          .slice(0,6)
        });
    },
    getTeachingSeries () {
      let data = [];
      axios
        .get('/Webhooks/Lava.ashx/crossings/api/teaching-series')
        .then(response => {
          data = response.data
          this.teachingSeries = data.filter(e => new Date(e.PublishDateTime) <= new Date())
          .sort((a,b) => new Date(b.PublishDateTime) - new Date(a.PublishDateTime))
          .slice(0, 6)
        });
    },
    applySearchTags() {
      const params = new URLSearchParams(window.location.search);
      if (params.has('tag')) {
        this.showResults = true;
        var tag = params.get('tag');
        this.filterInput = tag
      }
    },
    setPages () {
      this.pages = [];
      this.page = 1;
      let numberOfPages = Math.ceil(this.filteredMessages.length / this.perPage);
      for (let index = 1; index <= numberOfPages; index++) {
        this.pages.push(index);
      }
    },
    paginate (messages) {
      let page = this.page;
      let perPage = this.perPage;
      let from = 0;
      let to = (page * perPage);
      return  messages.slice(from, to);
    },
    setFilter(propName, item) {
      this[`${propName}Filter`] = item.Name;
    }

  },
  computed: {
    filteredMessages() {

      return this.messages.filter(message => {

        if (!this.filterInput) return true;

        let shouldInclude = false;

        shouldInclude |= (!!message.Speaker && message.Speaker.toLowerCase().includes(this.filterInput.toLowerCase().trim()));
        shouldInclude |= (this.filterInput.toLowerCase().trim().length >= {{mediaItemTopicMinCharsToMatch}} && !!message.Topics && message.Topics.map(t => t.toLowerCase().trim()).filter(t => t.indexOf(this.filterInput.toLowerCase().trim()) === 0).length > 0);
        shouldInclude |= (!!message.Title && message.Title.toLowerCase().trim().includes(this.filterInput.toLowerCase().trim()));
        shouldInclude |= (!!message.Series && !!message.Series.Title && message.Series.Title.toLowerCase().trim().includes(this.filterInput.toLowerCase().trim()));

        return !!shouldInclude;

      });
    },
    mediaItems () {
      return this.paginate(this.filteredMessages);
    }

  },
  watch: {
    filteredMessages () {
      this.setPages();
    },
  },
  created(){
    this.getMedia();
    this.applySearchTags();
    this.getSermonSeries();
    this.getTeachingSeries();
  },
  updated(){
    cl.responsive()
}
});

</script>
