{% assign imageStorageUrl = 'Global' | Attribute:'ImageURL' | Prepend:'https://' %}
{% assign imageSize = '/fit-in/600x600/' %}
{% assign evtData = 'events' | PersistedDataset %}
{% assign audiences = evtData.Audiences | Uniq %}
{% assign itemsPerPage = 6 %}

{% javascript id:'vue' url:'https://cdn.jsdelivr.net/combine/npm/vue@2.6.11/dist/vue.js,npm/axios@0.19.2/dist/axios.js,npm/vue-autosuggest@2.2.0' %}
{% endjavascript %}
<link rel="stylesheet" type="text/css" href="~~/Styles/vue-autosuggest.css">

<div id="vapp" class="media-list">
  <div class="media-search">

    <vue-rock-filterable-list
      :items="events"
      :label="'Find an Event'"
      :place-holder="'Event name or tag'"
      :items-per-page="'{{itemsPerPage}}'"
      :search-options="searchOptions"
      :initial-input="tagInput"
      @filter="filterHandler"
      v-slot="{ item: event }"
      >
      <a :href="event.link" class="card cardShadow">
        <div class="thumb">
          <img :src="event.AssetImage" class="event-img">
        </div>
        <div class="row card-content-row">
          <div class="card-content">
            <div class="col">
              <div>
                <h4>{% raw %}{{ event.Name }}{% endraw %}</h4>
                <p v-if="event.audiences" v-for="audience in event.audiences" style="margin-bottom: 1px;"> <i v-if="audience" class="fas fa-tags"></i>
                    <span v-if="audience">{% raw %}{{ audience }} {% endraw %}</span>
                </p>
                <p class="date">{% raw %}{{ event.date }}{% endraw %}</p>
                <p class="recurring"></p>
              </div>
            </div>
            <div class="btn icon-button shadowDepth2">
              <span>Details</span>
              <i class="fas fa-angle-right"></i>
            </div>
          </div>
        </div>
      </a>
    </vue-rock-filterable-list>

  </div>
</div>

<script src="/Themes/RockTheme/Scripts/vue-rock-filterable-list.js"></script>

<script>

const imageStorageUrl = '{{ imageStorageUrl }}';

const vueApp = new Vue({
  el: '#vapp',
  data () {
    return {
      events : [''],
      searchOptions: [''],
      tagInput: ''
    }
  },
  methods:{
    filterHandler(evts, filterText, cb) {
      let filteredEvents = evts.filter(evt => {

        if (!filterText) { return true; }
        //if (filterText.toLowerCase().trim().length < 2) return false;
        let shouldInclude = false;

        shouldInclude |= (!!evt.Name && evt.Name.toLowerCase().trim().includes(filterText.toLowerCase().trim()));

        if (!evt.audiences) return false;
        shouldInclude |= evt.audiences
          .map(a => {
            if (!a) return '';
            return a.toLowerCase().trim()
          })
          .filter(a => a.indexOf(filterText.toLowerCase().trim()) === 0)
          .length > 0;

        return !!shouldInclude;
      });
      cb(filteredEvents);
    },
    getMedia () {
      let data = [];
      axios
        .get('/Webhooks/Lava.ashx/crossings/api/events')
        .then(response => {
          this.events = response.data.Events;
          const audiences = response.data.Audiences;
          const names = response.data.Events.map(e => e.Name);
          const distinct = [...new Set(audiences.concat(names))];
          this.searchOptions = [
            { data: distinct }
          ];

        });
    },
    applySearchTags() {
      const params = new URLSearchParams(window.location.search);
      if (params.has('tag')) {
        var tag = params.get('tag');
        console.log(`setting tagInput to ${tag}`);
        this.tagInput = tag;
      }
    }
  },
  created() {
    this.getMedia();
    this.applySearchTags();
  }
});

</script>
